[versions]
agp = "8.7.3"
kotlin = "2.2.0"
#ios error until 1.7.1
compose-plugin = "1.8.1"

android-compileSdk = "35"
android-minSdk = "28"
android-targetSdk = "34"

core = "1.9.0"
kotlinx-coroutines-core = "1.7.1"

androidx-core = "1.7.0"
androidx-activity-compose = "1.9.0"
androidx-compose = "1.6.8"
androidx-splashScreen = "1.0.1"

ktorClient = "3.2.1"
voyager = "1.0.0-rc07"
kotlinx-datetime = "0.6.2"
kotlinx-serialization = "1.8.0"
sqlDelight = "2.0.2"
koin = "4.0.2"
koinCompose = "4.0.2"
datastorePreferencesCore = "1.1.7"
kermit = "2.0.5"
kamelImage = "1.0.7"
mokoResources = "0.24.5"
mokoMvvm = "0.16.1"
calf-ui = "0.6.1"
calf-webview = "0.8.0"
windowSizeClass = "0.3.0"
pagingComposeCommon = "3.3.0-alpha02-0.4.0"

[libraries]
core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "core" }

# Android
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity-compose" }
androidx-compose-ui = { module = "androidx.compose.ui:ui", version.ref = "androidx-compose" }
androidx-compose-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "androidx-compose" }
androidx-compose-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "androidx-compose" }
androidx-compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "androidx-compose" }
androidx-compose-material = { module = "androidx.compose.material:material", version.ref = "androidx-compose" }

androidx-splashScreen = { module = "androidx.core:core-splashscreen", version.ref = "androidx-splashScreen" }

# Ktor - Networking
ktor-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktorClient" }
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktorClient" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktorClient" }
ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktorClient" }
ktor-android = { module = "io.ktor:ktor-client-android", version.ref = "ktorClient" }
ktor-ios = { module = "io.ktor:ktor-client-ios", version.ref = "ktorClient" }
ktor-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktorClient" }

# Koin - DI
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koinCompose" }

# Database - SQLDelight
sqlDelight-androidDriver = { module = "app.cash.sqldelight:android-driver", version.ref = "sqlDelight" }
sqlDelight-nativeDriver = { module = "app.cash.sqldelight:native-driver", version.ref = "sqlDelight" }
sqlDelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
sqlDelight-adapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqlDelight" }

# Coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "core" }

# Date & Time
kotlinx-dateTime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
# Serialization
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }

# Navigation - Voyager
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
voyager-tabNavigator = { module = "cafe.adriel.voyager:voyager-tab-navigator", version.ref = "voyager" }
voyager-bottomSheetNavigator = { module = "cafe.adriel.voyager:voyager-bottom-sheet-navigator", version.ref = "voyager" }
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }

# DataStore - Preferences
datastore-preferences = { module = "androidx.datastore:datastore-preferences-core", version.ref = "datastorePreferencesCore" }

# Resources - MoKo
moko-resources-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "mokoResources" }
moko-resources-test = { module = "dev.icerock.moko:resources-test", version.ref = "mokoResources" }
moko-resources-generator = { module = "dev.icerock.moko:resources-generator", version.ref = "mokoResources" }

# MVVM - MoKo
moko-mvvm-core = { module = "dev.icerock.moko:mvvm-core", version.ref = "mokoMvvm" }
moko-mvvm-compose = { module = "dev.icerock.moko:mvvm-compose", version.ref = "mokoMvvm" }
moko-mvvm-flow = { module = "dev.icerock.moko:mvvm-flow", version.ref = "mokoMvvm" }
moko-mvvm-flow-compose = { module = "dev.icerock.moko:mvvm-flow-compose", version.ref = "mokoMvvm" }

# Logging
logger-kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }

# Paging
paging-compose-common = { module = "app.cash.paging:paging-compose-common", version.ref = "pagingComposeCommon" }
paging-testing = { module = "app.cash.paging:paging-testing", version.ref = "pagingComposeCommon" }

#Image Loading
kamel-image = { module = "media.kamel:kamel-image-default", version.ref = "kamelImage" }

#Calf - Compose Adaptive Look & Feel
calf-ui = { module = "com.mohamedrejeb.calf:calf-ui", version.ref = "calf-ui" }
calf-webview = { module = "com.mohamedrejeb.calf:calf-webview", version.ref = "calf-webview" }

#WindowSizeClass
windowSizeClass = { module = "dev.chrisbanes.material3:material3-window-size-class-multiplatform", version.ref = "windowSizeClass" }

[bundles]
voyager = [
    "voyager-koin",
    "voyager-transitions",
    "voyager-tabNavigator",
    #disable for now, causes build error
#    "voyager-bottomSheetNavigator",
    "voyager-navigator"
]

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
org-jetbrains-kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqlDelight" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinx-serialization" }

